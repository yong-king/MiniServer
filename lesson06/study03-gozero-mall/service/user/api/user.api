syntax = "v1"

info (
	title:   "mall"
	desc:    "go-zero study project"
	author:  "ysh"
	email:   "@youngking.com"
	version: "1.0"
)

type SignupRequest {
	Username   string `json:"username"`
	Password   string `json:"password"`
	RePassword string `json:"re_password"`
	Gender     int    `json:"gender, options=0|1|2, default=0"`
}

type SingupResponse {
	Message string `json:"message"`
}

@server (
	prefix: /v1
)
service user-api {
	@handler SignupHandler
	post /user/signup (SignupRequest) returns (SingupResponse)

	@handler LoginHandler
	post /user/login (LoginRequest) returns (LoginResponse)
}

type LoginRequest {
	Username string `json:"username"`
	Password string `json:"password"`
}

type LoginResponse {
	Message      string `json:"message"`
	AccessToken  string `json:"accsee_token"`
	AccseeExpire int    `json:"access_expire"`
	RefreshAfter int    `json:"refreshAfter"`
}

//  用户信息接口
// 1. 用户登录成功之后才能访问，需要认证auth
// 1.1 生成JWT
// 1.2 返回给前端
// 前端代码会把token保存起来，后续每次请求都会带上这个token
// 2. 后端需要鉴权的接口就会对请求进行鉴权，从请求头中取到token进行解析
// 2.1 解析成功就是登录用户
// 2.2 解析失败就是为登录用户或token失效用户
// 3. refresh token（可选）
type UserInfoRequest {
	UserId int64 `form:"user_id"`
}

type UserInfoResponse {
	UserName string `json:"username"`
	Gender   int    `json:"gender"`
	Message  string `json:"message"`
}

@server (
	prefix:     /v1
	jwt:        Auth // 开启 jwt 认证
	middleware: Cost // 添加中间件（路由中间件）
)
service user-api {
	@handler UserInfoHandler
	get /user/info (UserInfoRequest) returns (UserInfoResponse)
}

