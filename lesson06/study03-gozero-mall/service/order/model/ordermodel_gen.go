// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	orderFieldNames          = builder.RawFieldNames(&Order{})
	orderRows                = strings.Join(orderFieldNames, ",")
	orderRowsExpectAutoSet   = strings.Join(stringx.Remove(orderFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	orderRowsWithPlaceHolder = strings.Join(stringx.Remove(orderFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheDb1OrderIdPrefix      = "cache:db1:order:id:"
	cacheDb1OrderOrderIdPrefix = "cache:db1:order:orderId:"
)

type (
	orderModel interface {
		Insert(ctx context.Context, data *Order) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Order, error)
		FindOneByOrderId(ctx context.Context, orderId uint64) (*Order, error)
		Update(ctx context.Context, data *Order) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultOrderModel struct {
		sqlc.CachedConn
		table string
	}

	Order struct {
		Id         uint64    `db:"id"`
		CreateAt   time.Time `db:"create_at"`
		CreateBy   string    `db:"create_by"`
		UpdateAt   time.Time `db:"update_at"`
		UpdateBy   string    `db:"update_by"`
		Version    uint64    `db:"version"`
		IsDel      uint64    `db:"is_del"`   // 01
		UserId     uint64    `db:"user_id"`  // id
		OrderId    uint64    `db:"order_id"` // id
		TradeId    string    `db:"trade_id"`
		PayChannel uint64    `db:"pay_channel"`
		Status     uint64    `db:"status"` // :100/ 200 300 400
		PayAmount  uint64    `db:"pay_amount"`
		PayTime    time.Time `db:"pay_time"`
	}
)

func newOrderModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultOrderModel {
	return &defaultOrderModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`order`",
	}
}

func (m *defaultOrderModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	db1OrderIdKey := fmt.Sprintf("%s%v", cacheDb1OrderIdPrefix, id)
	db1OrderOrderIdKey := fmt.Sprintf("%s%v", cacheDb1OrderOrderIdPrefix, data.OrderId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, db1OrderIdKey, db1OrderOrderIdKey)
	return err
}

func (m *defaultOrderModel) FindOne(ctx context.Context, id uint64) (*Order, error) {
	db1OrderIdKey := fmt.Sprintf("%s%v", cacheDb1OrderIdPrefix, id)
	var resp Order
	err := m.QueryRowCtx(ctx, &resp, db1OrderIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", orderRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrderModel) FindOneByOrderId(ctx context.Context, orderId uint64) (*Order, error) {
	db1OrderOrderIdKey := fmt.Sprintf("%s%v", cacheDb1OrderOrderIdPrefix, orderId)
	var resp Order
	err := m.QueryRowIndexCtx(ctx, &resp, db1OrderOrderIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `order_id` = ? limit 1", orderRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, orderId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrderModel) Insert(ctx context.Context, data *Order) (sql.Result, error) {
	db1OrderIdKey := fmt.Sprintf("%s%v", cacheDb1OrderIdPrefix, data.Id)
	db1OrderOrderIdKey := fmt.Sprintf("%s%v", cacheDb1OrderOrderIdPrefix, data.OrderId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, orderRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.CreateBy, data.UpdateBy, data.Version, data.IsDel, data.UserId, data.OrderId, data.TradeId, data.PayChannel, data.Status, data.PayAmount, data.PayTime)
	}, db1OrderIdKey, db1OrderOrderIdKey)
	return ret, err
}

func (m *defaultOrderModel) Update(ctx context.Context, newData *Order) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	db1OrderIdKey := fmt.Sprintf("%s%v", cacheDb1OrderIdPrefix, data.Id)
	db1OrderOrderIdKey := fmt.Sprintf("%s%v", cacheDb1OrderOrderIdPrefix, data.OrderId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, orderRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.CreateBy, newData.UpdateBy, newData.Version, newData.IsDel, newData.UserId, newData.OrderId, newData.TradeId, newData.PayChannel, newData.Status, newData.PayAmount, newData.PayTime, newData.Id)
	}, db1OrderIdKey, db1OrderOrderIdKey)
	return err
}

func (m *defaultOrderModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheDb1OrderIdPrefix, primary)
}

func (m *defaultOrderModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", orderRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultOrderModel) tableName() string {
	return m.table
}
