syntax = "proto3";

package bookstore;

option go_package = "client_bookstore/pb";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

// 一套简单的书店API。
//
// 这套API管理着书架和图书资源。 书架包含图书。
service Bookstore {
  // 返回书店中所有书架的列表。
  rpc ListShelves(google.protobuf.Empty) returns (ListShelvesResponse) {
    // 定义HTTP映射
    // Client example (假设你的服务域名是 'DOMAIN_NAME'):
    //   curl http://DOMAIN_NAME/v1/shelves
    option (google.api.http) = { get: "/v1/shelves" };
  }
  // 在书店中创建一个新的书架。
  rpc CreateShelf(CreateShelfRequest) returns (Shelf) {
    // Client example:
    //   curl -d '{"theme":"Music"}' http://DOMAIN_NAME/v1/shelves
    option (google.api.http) = {
      post: "/v1/shelves"
      body: "shelf"
    };
  }
  // 返回书店中指定的书架。
  rpc GetShelf(GetShelfRequest) returns (Shelf) {
    // Client example - 返回第一个书架:
    //   curl http://DOMAIN_NAME/v1/shelves/1
    option (google.api.http) = { get: "/v1/shelves/{shelf}" };
  }
  // 删除书架，包括书架上存储的所有图书。
  rpc DeleteShelf(DeleteShelfRequest) returns (google.protobuf.Empty) {
    // Client example - 删除第二个书架：
    //   curl -X DELETE http://DOMAIN_NAME/v1/shelves/2
    option (google.api.http) = { delete: "/v1/shelves/{shelf}" };
  }

  // 返回书架上的书列表
  rpc ListBooks(ListBooksRequest) returns (ListBooksResponse) {
    option (google.api.http) = {
        get: "/v1/shelves/{shelf}/books"
    };
  }

  // 创建一本新书
  rpc CreateBook(CreateBookRequest) returns (Book) {
    option (google.api.http) = {
        post: "/v1/shelves/{shelf}/books"
        body: "book"
    };
  }

  // 返回指定的书籍
  rpc GetBook(GetBookRequest) returns (GetBookRequesResponse) {
    option (google.api.http) = {
        get: "/v1/shelves/{shelf}/books/{book}"
    };
  }

  // 从书架上删除书籍
  rpc DeleteBook(DeleteBookRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
        delete: "/v1/shelves/{shelf}/books/{book}"
    };
  }
}

// 书架资源。
message Shelf {
    // 书架的唯一 id。
    int64 id = 1;
    // 书架上的主题(小说、诗歌等)。
    string theme = 2;
    // 书架的大小
    int64 size = 3;
  }
  
// 图书资源。
message Book {
    // 图书的唯一 id。
    int64 id = 1;
    // 图书的作者。
    string author = 2;
    // 书名
    string title = 3;}

// 调用 ListShelves 返回的响应消息。
message ListShelvesResponse {
    // 书店里的书架。
    repeated Shelf shelves = 1;
  }
  
// CreateShelf 方法的请求消息。
message CreateShelfRequest {
    // 要创建的书架数据
    Shelf shelf = 1;
  }
  
// GetShelf 方法的请求消息。
message GetShelfRequest {
    // 要检索的书架的ID。
    int64 shelf = 1;
  }
  
// DeleteShelf 方法的请求消息。
message DeleteShelfRequest {
    // 要删除的书架的ID
    int64 shelf = 1;
  }

message ListBooksRequest {
    // 索引书架id
    int64 shelf = 1;
    string page_token = 2;
}

message ListBooksResponse {
    // 书架上的书
    repeated Book books = 1;
    string next_page_token = 2;
}

message CreateBookRequest {
    // 索引书架id
    int64 shelf = 1;
    // 创建图书的数据
    Book book = 2;
}


message GetBookRequest {
    // 索引书架id
    int64 shelf = 1;
    // 索引书籍id
    int64 book = 2;
}

message GetBookRequesResponse {
    // 返回书籍的信息
    Book book = 1;
}

message DeleteBookRequest {
    // 索引书架id
    int64 shelf = 1;
    // 索引书籍id
    int64 book = 2;
}
