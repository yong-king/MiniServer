// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"service-review/internal/biz"
	"service-review/internal/conf"
	"service-review/internal/data"
	"service-review/internal/server"
	"service-review/internal/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, registry *conf.Registry, confData *conf.Data, elasticsearch *conf.Elasticsearch, logger log.Logger) (*kratos.App, func(), error) {
	registrar := server.NewRegistrar(registry)
	db, err := data.NewDB(confData)
	if err != nil {
		return nil, nil, err
	}
	typedClient, err := data.NewEsclient(elasticsearch)
	if err != nil {
		return nil, nil, err
	}
	client := data.NewRedisClient(confData)
	dataData, cleanup, err := data.NewData(db, logger, typedClient, client)
	if err != nil {
		return nil, nil, err
	}
	reviewRepo := data.NewReviewRepo(dataData, logger)
	reviewUsecase := biz.NewReviewUsecase(reviewRepo, logger)
	reviewService := service.NewReviewService(reviewUsecase)
	grpcServer := server.NewGRPCServer(confServer, reviewService, logger)
	httpServer := server.NewHTTPServer(confServer, reviewService, logger)
	app := newApp(logger, registrar, grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
